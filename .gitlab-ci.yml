image: openjdk:11

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_FORCE_HTTPS: "true"

stages:
  - build
  - test
  - package

# BUILD
.build_template: &build_template_def
  tags:
    - stardust
    - self-hosted
    - Linux
  stage: build
  artifacts:
    expire_in: 4 hours
    paths:
      - app/build/outputs
      - .android/

  before_script:
    # Specify SDK tools version, extract compile SDK
    # TODO: Can we get this more automatically somehow?
    - export ANDROID_SDK_TOOLS=9477386
    - export ANDROID_COMPILE_SDK=`egrep '^[[:blank:]]+compileSdk' app/build.gradle | awk '{print $2}'`

    # Logging
    - echo $ANDROID_SDK_TOOLS
    - echo $ANDROID_COMPILE_SDK

    # Fetch SDK tools
    - wget --quiet --output-document=/tmp/sdk-tools-linux.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
    - unzip /tmp/sdk-tools-linux.zip -d .android

    # Env vars
    - export ANDROID_HOME=$PWD/.android
    - export PATH=$PATH:$PWD/.android/platform-tools/

    # Install platform tools & Android SDK
    - echo y | .android/cmdline-tools/bin/sdkmanager --sdk_root=.android "platforms;android-${ANDROID_COMPILE_SDK}"

    # Set perms
    - chmod +x ./gradlew

build_debug:
  <<: *build_template_def
  except:
    - main

  script:
    - ./gradlew assembleDebug

build_release:
  <<: *build_template_def
  only:
    - main

  script:
    - ./gradlew assembleRelease

# TEST
unit_test:
  stage: test

  before_script:
    - export ANDROID_HOME=$PWD/.android
    - export PATH=$PATH:$PWD/.android/platform-tools/
    - chmod +x ./gradlew

  script:
    - ./gradlew test

# PACKAGE
.package_template: &package_template_def
  before_script:
    - export VERSION_NAME=`egrep '^[[:blank:]]+versionName[[:blank:]]'  app/build.gradle | awk '{print $2}' | sed s/\"//g`
    - export VERSION_CODE=`egrep '^[[:blank:]]+versionCode[[:blank:]]'  app/build.gradle | awk '{print $2}'`
    - mkdir -p deliverables

    # Log build info
    - touch ./deliverables/info.txt
    - echo "Build date          $(date)"                >> ./deliverables/info.txt
    - echo "App version name    ${VERSION_NAME}"        >> ./deliverables/info.txt
    - echo "App version code    ${VERSION_CODE}"        >> ./deliverables/info.txt
    - echo "Git branch          ${CI_COMMIT_REF_NAME}"  >> ./deliverables/info.txt
    - echo "Git commit          ${CI_COMMIT_SHA}"       >> ./deliverables/info.txt
    - echo "Gitlab pipeline     ${CI_PIPELINE_ID}"      >> ./deliverables/info.txt

package_debug:
  <<: *package_template_def
  stage: package
  environment: Debug
  except:
    - main
  script:
    - mv app/build/outputs/apk/debug/app-debug.apk ./deliverables/Cadenas-v$VERSION_NAME-$VERSION_CODE-debug.apk
  artifacts:
    expire_in: 3 days
    paths:
      - deliverables

package_release:
  <<: *package_template_def
  stage: package
  environment: Release
  only:
    - main
  script:
    - mv app/build/outputs/apk/release/app-release.apk ./deliverables/Cadenas-v$VERSION_NAME-$VERSION_CODE-release.apk
  artifacts:
    expire_in: 4 weeks
    paths:
      - deliverables